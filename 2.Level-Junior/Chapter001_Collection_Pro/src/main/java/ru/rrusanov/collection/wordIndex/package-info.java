/** * @author Roman Rusanov * @version 0.1 * @since 17.07.2018 * * WordIndex.java This class load text file to collection TrieTree, each word(sequence between space char(32)) be loaded. *  void loadFile(String filename) The method words from file to tree. *  Set<Integer> getIndexes4Word(String searchWord) The method return Set that contain int value position passed *   searchWord, if word not present then return null. * * Node.java This class describes the Node properties an behavior. *  void addEndOfWordNode(int position) The method add last node after word(char sequence) *   this node contain counter of occurrence this word in file, and filed isWord set to true. *  void addChildren(Character character) The method add children in Node Set. *  Node getChildrenNode(Character character) The method return children node that contain passed character. *  Set<Integer> getPositionInFile() The method return set with position of word occurrence in file. *  void addPositionInFileToNode(int position) The method add position in file to set. *  boolean isWord() The method return field value. *  boolean containChildren(Character character) The method check node contain children in set with passed char value. *  boolean equals(Object object) The method override equals method from Object class. *  int hashCode() The method override hashCode method from Object class. * * TrieTree.java The Class describes classic Trie tree collection. *  boolean put(String addWord, int position) The method add word to tree, smashing in to char sequence. *  Node search(String searchWord) The method search  word(char sequence in tree). */package ru.rrusanov.collection.wordIndex;