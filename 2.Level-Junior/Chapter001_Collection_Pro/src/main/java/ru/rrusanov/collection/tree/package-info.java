/** * @author Roman Rusanov * @version 0.1 * @since 05.07.2018 * * The interface SimpleTree. *  boolean add(E parent, E child) Added element child in parent. *  Optional<Node<E>> findBy(E value) The method find in tree collection node with passed value. *  Iterator<E> iterator() Returns an iterator over elements of type E. * * The class Tree.java stored elements in tree of node elements. *  Tree(Node<E> root) The default constructor. *  boolean add(E parent, E child) Added element child in parent. *  Optional<Node<E>> findBy(E value) The method find in tree collection node with passed value, *   and return them wrapped Optional class *  Iterator<E> iterator() Returns an iterator over elements of type Node<E>. *   boolean hasNext() The method check has collection more element to iterate. *   E next() The method return next element in collection. *   ArrayList<Node<E>> sequenceToIterate() The method build sequence element of Node<E> and return as ArrayList. *  boolean isBinary() The method check is tree structure binary. * * The class Node.java implements node element for Tree.java class. *  Node(final E value) The default constructor. *  E getValue() The method get data from value field. *  void add(Node<E> child) The method add lower level node. *  List<Node<E>> leaves() The method return all nodes low level(children). *  int compareTo(E value) The method implement Comparable interface, compare stored data value in nodes. *  boolean eqValue(E that) The method compare data value. *  boolean equals(Object obj) The method override equals method. Compare field value and children. *  int hashCode() The method return hashcode of node. */package ru.rrusanov.collection.tree;