/** * @author Roman Rusanov * @version 0.1 * @since 28.06.2018 * * The class HashMap.java describes collection with classic HashMap without collision handling. If exist collision put return false. * *  HashMap(int size) The default constructor. *   int hash(K key) The method return hash value for key. *   int getSize() The method return size of collection. *   void growAndReHash() The method resize(old length + 1) the collection field if call insert *                        method and no more left free entry in array, *                        and rehash all elements, because hash compute on collection length. *   Entry<K, V>[] removeNullsElements() The method need to iterator behavior support. *                                       Remove null elements from collection field. *                                       And return copy with out null elements. *   boolean insert(K key, V value) The method insert new pair key and value in collection. Null key value not accepted. *   V get(K key) The method return value associated with passed key value. *   boolean delete(K key) The method remove pair from collection. *   public Iterator<Entry<K, V>> iterator() Classic iterator for collection. *    public boolean hasNext() The method check has more elements to iterate. *    public Entry<K, V> next() The method return next element. * *  The class Entry.java describes instance that store one data entry. * *   Entry(K key, V value) The default constructor. *   K getKey() The method return key value. *   V getValue() The method return data value associated with key. *   int hashCode() The method return hashcode. *   boolean equals(Object o) The method compare to Entry by fields key and value. */package ru.rrusanov.collection.hashMap;